private Map<String, Object> mapJsonToDto(Map<String, Object> jsonObject, Map<String, Object> schema) {
    List<Map<String, Object>> columns = (List<Map<String, Object>>) schema.get("columns");
    Map<String, Object> dto = new HashMap<>();

    for (Map<String, Object> column : columns) {
        String columnName = (String) column.get("field_name");
        String dataType = (String) column.get("data_type");

        // Process fields with "Nested_JSON" type
        if ("Nested_JSON".equals(dataType)) {
            List<Map<String, Object>> arrayJson = (List<Map<String, Object>>) column.get("array_json");
            if (arrayJson != null) {
                for (Map<String, Object> nestedColumn : arrayJson) {
                    String nestedColumnName = (String) nestedColumn.get("field_name");
                    String nestedDataType = (String) nestedColumn.get("data_type");

                    // Process each field in the nested JSON array like regular fields
                    if (jsonObject.containsKey(nestedColumnName)) {
                        Object nestedValue = jsonObject.get(nestedColumnName);
                        dto.put(nestedColumnName, nestedValue);
                    }
                }
            }
            continue; // Skip adding the Nested_JSON field itself to dto
        }

        // Process regular fields
        if (jsonObject.containsKey(columnName)) {
            Object value = jsonObject.get(columnName);
            dto.put(columnName, value);
        }
    }

    // Add additional fields if needed
    dto.put("staging_id", Integer.parseInt(jsonObject.get("staging_id").toString()));
    dto.put("batch_id", Integer.parseInt(jsonObject.get("batch_id").toString()));

    return dto;
}
