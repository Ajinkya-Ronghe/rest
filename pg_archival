CREATE OR REPLACE FUNCTION esh_main.convert_to_partitioned_table(
    source_table TEXT,      -- Name of the existing table
    partition_column TEXT   -- The column used for partitioning (must be of DATE type)
)
RETURNS void AS $$
DECLARE
    min_date DATE;
    max_date DATE;
    partition_name TEXT;
    start_date DATE;
    end_date DATE;
    partitioned_table TEXT;
BEGIN
    -- Step 1: Validate if the partition column exists
    PERFORM 1
    FROM information_schema.columns
    WHERE table_name = source_table AND column_name = partition_column;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Column % does not exist in table %', partition_column, source_table;
    END IF;

    -- Step 2: Determine min and max values of the partition column
    EXECUTE format('SELECT MIN(%I), MAX(%I) FROM %I', partition_column, partition_column, source_table)
    INTO min_date, max_date;

    IF min_date IS NULL OR max_date IS NULL THEN
        RAISE NOTICE 'No data found in table %, nothing to partition.', source_table;
        RETURN;
    END IF;

    -- Step 3: Create a new partitioned table
    partitioned_table := source_table || '_partitioned';
    EXECUTE format('CREATE TABLE esh_main.%I (
                        id SERIAL,
                        %I DATE NOT NULL,
                        CONSTRAINT %I_pkey PRIMARY KEY (id, %I)
                    ) PARTITION BY RANGE (%I);',
                    partitioned_table, partition_column, partitioned_table, partition_column, partition_column);

    RAISE NOTICE 'Created partitioned table: %', partitioned_table;

    -- Step 4: Create partitions dynamically for every 90-day range
    start_date := min_date;
    WHILE start_date <= max_date LOOP
        end_date := start_date + INTERVAL '90 days';
        IF end_date > max_date THEN
            end_date := max_date + INTERVAL '1 day'; -- Include all remaining data
        END IF;

        partition_name := 'esh_main.' || partitioned_table || '_' || to_char(start_date, 'YYYYMMDD');

        EXECUTE format('CREATE TABLE %I PARTITION OF esh_main.%I
                        FOR VALUES FROM (%L) TO (%L);',
                        partition_name, partitioned_table, start_date, end_date);

        RAISE NOTICE 'Created partition: %', partition_name;
        start_date := end_date;
    END LOOP;

    -- Step 5: Transfer data from the original table to the new partitioned table
    EXECUTE format('INSERT INTO esh_main.%I (id, %I) SELECT id, %I FROM %I;',
                    partitioned_table, partition_column, partition_column, source_table);

    RAISE NOTICE 'Data transferred successfully to the partitioned table.';

    -- Step 6: Drop the original table and rename the partitioned table (optional)
    EXECUTE format('DROP TABLE %I;', source_table);
    EXECUTE format('ALTER TABLE esh_main.%I RENAME TO %I;', partitioned_table, source_table);

    RAISE NOTICE 'Table % has been converted to a partitioned table.', source_table;

END;
$$ LANGUAGE plpgsql;
