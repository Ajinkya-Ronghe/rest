public Map<String, Object> getTableSchemaAsJson(String tableName) {
    String sql = "SELECT schema_definition FROM schema_metadata WHERE table_name = ?";
    String jsonSchema = jdbcTemplate.queryForObject(sql, new Object[]{tableName}, String.class);
    ObjectMapper objectMapper = new ObjectMapper();
    return objectMapper.readValue(jsonSchema, new TypeReference<Map<String, Object>>() {});
}



public Map<String, Object> mapRowToDto(Map<String, Object> schema, ResultSet rs) throws SQLException {
    List<Map<String, Object>> columns = (List<Map<String, Object>>) schema.get("columns");
    Map<String, Object> dto = new HashMap<>();
    
    for (Map<String, Object> column : columns) {
        String columnName = (String) column.get("column_name");
        dto.put(columnName, rs.getObject(columnName));
    }
    return dto;
}


public String generateInsertQuery(String tableName, Map<String, Object> schema) {
    List<Map<String, Object>> columns = (List<Map<String, Object>>) schema.get("columns");

    String columnNames = columns.stream()
        .map(col -> (String) col.get("column_name"))
        .collect(Collectors.joining(", "));

    String values = columns.stream()
        .map(col -> "?")
        .collect(Collectors.joining(", "));

    return String.format("INSERT INTO %s (%s) VALUES (%s)", tableName, columnNames, values);
}




public void batchInsert(String tableName, List<Map<String, Object>> dtoList) {
    Map<String, Object> schema = getTableSchemaAsJson(tableName);
    String insertQuery = generateInsertQuery(tableName, schema);

    List<Map<String, Object>> columns = (List<Map<String, Object>>) schema.get("columns");

    jdbcTemplate.batchUpdate(insertQuery, dtoList, dtoList.size(), (ps, dto) -> {
        for (int i = 0; i < columns.size(); i++) {
            String columnName = (String) columns.get(i).get("column_name");
            ps.setObject(i + 1, dto.get(columnName));
        }
    });
}









public void processAndInsertJsonArray(String tableName, String jsonArray) throws IOException {
    // Step 1: Parse the incoming JSON array into List<Map<String, Object>>
    ObjectMapper objectMapper = new ObjectMapper();
    List<Map<String, Object>> incomingJsonList = objectMapper.readValue(jsonArray, new TypeReference<List<Map<String, Object>>>() {});
    
    // Step 2: Retrieve the schema for the table from the schema metadata
    Map<String, Object> schema = getTableSchemaAsJson(tableName);
    
    // Step 3: Map each incoming JSON object to a DTO using the schema
    List<Map<String, Object>> dtoList = new ArrayList<>();
    for (Map<String, Object> jsonObject : incomingJsonList) {
        Map<String, Object> dto = mapJsonToDto(jsonObject, schema);
        dtoList.add(dto);
    }

    // Step 4: Perform batch insert into the table
    batchInsert(tableName, dtoList);
}

// Step 3.1: Map each JSON object to a DTO based on the schema
private Map<String, Object> mapJsonToDto(Map<String, Object> jsonObject, Map<String, Object> schema) {
    List<Map<String, Object>> columns = (List<Map<String, Object>>) schema.get("columns");
    Map<String, Object> dto = new HashMap<>();
    
    for (Map<String, Object> column : columns) {
        String columnName = (String) column.get("column_name");
        // Map the incoming JSON value to the DTO if it exists
        if (jsonObject.containsKey(columnName)) {
            dto.put(columnName, jsonObject.get(columnName));
        }
    }
    return dto;
}








public Map<String, Object> getTableSchemaAsJson(int id) throws IOException {
    String sql = "SELECT table_name, schema_definition FROM schema_metadata WHERE id = ?";

    // Execute query with id as the parameter and return both table_name and schema_definition
    return jdbcTemplate.queryForObject(sql, new Object[]{id}, (rs, rowNum) -> {
        Map<String, Object> result = new HashMap<>();
        result.put("table_name", rs.getString("table_name"));
        
        // Parse the schema_definition JSON into a Map<String, Object>
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonSchema = rs.getString("schema_definition");
        Map<String, Object> schemaDefinition = objectMapper.readValue(jsonSchema, new TypeReference<Map<String, Object>>() {});

        result.put("schema_definition", schemaDefinition);
        return result;
    });
}





















public void processAndInsertRawJson(String rawJson) throws IOException {
    // Step 1: Parse the raw JSON to determine if it's an object or an array
    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode jsonNode = objectMapper.readTree(rawJson);
    
    // Step 2: Retrieve the schema and table name using the ID from the raw JSON
    int id = extractIdFromJson(jsonNode);  // You will need a function to extract ID from the raw JSON
    Map<String, Object> schemaAndTable = getTableSchemaAsJson(id);

    // Extract table name and schema from the response
    String tableName = (String) schemaAndTable.get("table_name");
    Map<String, Object> schema = (Map<String, Object>) schemaAndTable.get("schema_definition");

    List<Map<String, Object>> dtoList = new ArrayList<>();

    // Step 3: Check if the input is a single object or an array
    if (jsonNode.isArray()) {
        // It's an array, process each element
        for (JsonNode element : jsonNode) {
            Map<String, Object> jsonObject = objectMapper.convertValue(element, new TypeReference<Map<String, Object>>() {});
            Map<String, Object> dto = mapJsonToDto(jsonObject, schema);
            dtoList.add(dto);
        }
    } else if (jsonNode.isObject()) {
        // It's a single object
        Map<String, Object> jsonObject = objectMapper.convertValue(jsonNode, new TypeReference<Map<String, Object>>() {});
        Map<String, Object> dto = mapJsonToDto(jsonObject, schema);
        dtoList.add(dto);
    }

    // Step 4: Perform batch insert into the table
    batchInsert(tableName, dtoList);
}

// Step 2.1: Extract the ID from the JSON to fetch the schema (you can adjust this based on your structure)
private int extractIdFromJson(JsonNode jsonNode) {
    if (jsonNode.has("id")) {
        return jsonNode.get("id").asInt();
    }
    throw new IllegalArgumentException("ID field not found in the input JSON");
}

// Step 3.1: Map each JSON object to a DTO based on the schema
private Map<String, Object> mapJsonToDto(Map<String, Object> jsonObject, Map<String, Object> schema) {
    List<Map<String, Object>> columns = (List<Map<String, Object>>) schema.get("columns");
    Map<String, Object> dto = new HashMap<>();

    for (Map<String, Object> column : columns) {
        String columnName = (String) column.get("column_name");
        // Map the incoming JSON value to the DTO if it exists
        if (jsonObject.containsKey(columnName)) {
            dto.put(columnName, jsonObject.get(columnName));
        }
    }
    return dto;
}


