public List<StagingData> fetchAndUpdateTop100Unprocessed() {
    String query = "UPDATE StagingData " +
                   "SET status = 'P' " +
                   "WHERE id IN (SELECT id FROM StagingData WHERE status = 'U' ORDER BY id ASC LIMIT 100) " +
                   "RETURNING *";

    // Perform the update and fetch the updated rows
    return jdbcTemplate.query(query, new StagingDataRowMapper());
}


public Integer findBankIdByBankName(String bankName) {
    String query = "SELECT b.bank_id FROM BankDetails b WHERE b.bank_name = ?";
    
    // Fetch the bank ID using the provided bank name
    return jdbcTemplate.queryForObject(query, new Object[]{bankName}, Integer.class);
}







public void saveNormalizedDataBatch(List<NormalizedData> normalizedDataList) {
    String query = "INSERT INTO esh_main.ceh_tq_core_patch_health (" +
                   "computer_name, operating_system, client_health_tanium_client_version, ipv4_address, " +
                   "tanium_client_core_health, custom_tags, patch_coverage_status_details_details, " +
                   "patch_scan_errors_configuration_id, patch_scan_errors_message, patch_scan_age_days_since_successful_scan, " +
                   "patch_deployment_errors_deployment_id, patch_deployment_errors_patch_uid, patch_deployment_errors_error_number, " +
                   "patch_deployment_errors_error_message, patch_has_enforced_scan_configurations, patch_is_process_running, " +
                   "count, bank_id, staging_id, created_time) " +
                   "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    jdbcTemplate.batchUpdate(query, new BatchPreparedStatementSetter() {
        @Override
        public void setValues(PreparedStatement ps, int i) throws SQLException {
            NormalizedData normalizedData = normalizedDataList.get(i);
            
            // Set values using the column names
            ps.setString(findColumnIndex("computer_name"), normalizedData.getComputerName());
            ps.setString(findColumnIndex("operating_system"), normalizedData.getOperatingSystem());
            ps.setLong(findColumnIndex("client_health_tanium_client_version"), normalizedData.getClientHealthTaniumClientVersion());
            ps.setString(findColumnIndex("ipv4_address"), normalizedData.getIpv4Address());
            ps.setString(findColumnIndex("tanium_client_core_health"), normalizedData.getTaniumClientCoreHealth());
            ps.setString(findColumnIndex("custom_tags"), normalizedData.getCustomTags());
            ps.setString(findColumnIndex("patch_coverage_status_details_details"), normalizedData.getPatchCoverageStatusDetailsDetails());
            ps.setString(findColumnIndex("patch_scan_errors_configuration_id"), normalizedData.getPatchScanErrorsConfigurationId());
            ps.setString(findColumnIndex("patch_scan_errors_message"), normalizedData.getPatchScanErrorsMessage());
            ps.setString(findColumnIndex("patch_scan_age_days_since_successful_scan"), normalizedData.getPatchScanAgeDaysSinceSuccessfulScan());
            ps.setString(findColumnIndex("patch_deployment_errors_deployment_id"), normalizedData.getPatchDeploymentErrorsDeploymentId());
            ps.setString(findColumnIndex("patch_deployment_errors_patch_uid"), normalizedData.getPatchDeploymentErrorsPatchUid());
            ps.setString(findColumnIndex("patch_deployment_errors_error_number"), normalizedData.getPatchDeploymentErrorsErrorNumber());
            ps.setString(findColumnIndex("patch_deployment_errors_error_message"), normalizedData.getPatchDeploymentErrorsErrorMessage());
            ps.setString(findColumnIndex("patch_has_enforced_scan_configurations"), normalizedData.getPatchHasEnforcedScanConfigurations());
            ps.setString(findColumnIndex("patch_is_process_running"), normalizedData.getPatchIsProcessRunning());
            ps.setLong(findColumnIndex("count"), normalizedData.getCount());
            ps.setLong(findColumnIndex("bank_id"), normalizedData.getBankId());
            ps.setLong(findColumnIndex("staging_id"), normalizedData.getStagingId());
            ps.setTimestamp(findColumnIndex("created_time"), Timestamp.valueOf(normalizedData.getCreatedTime()));
        }

        @Override
        public int getBatchSize() {
            return normalizedDataList.size();
        }

        // Helper method to return the correct column index based on the column name
        private int findColumnIndex(String columnName) {
            switch (columnName) {
                case "computer_name":
                    return 1;
                case "operating_system":
                    return 2;
                case "client_health_tanium_client_version":
                    return 3;
                case "ipv4_address":
                    return 4;
                case "tanium_client_core_health":
                    return 5;
                case "custom_tags":
                    return 6;
                case "patch_coverage_status_details_details":
                    return 7;
                case "patch_scan_errors_configuration_id":
                    return 8;
                case "patch_scan_errors_message":
                    return 9;
                case "patch_scan_age_days_since_successful_scan":
                    return 10;
                case "patch_deployment_errors_deployment_id":
                    return 11;
                case "patch_deployment_errors_patch_uid":
                    return 12;
                case "patch_deployment_errors_error_number":
                    return 13;
                case "patch_deployment_errors_error_message":
                    return 14;
                case "patch_has_enforced_scan_configurations":
                    return 15;
                case "patch_is_process_running":
                    return 16;
                case "count":
                    return 17;
                case "bank_id":
                    return 18;
                case "staging_id":
                    return 19;
                case "created_time":
                    return 20;
                default:
                    throw new IllegalArgumentException("Unknown column name: " + columnName);
            }
        }
    });
}

