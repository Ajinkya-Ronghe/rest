public String generateInsertQuery(String tableName, Map<String, Object> schema) {
    logger.debug("Inside generateInsertQuery");

    List<Map<String, Object>> columns = (List<Map<String, Object>>) schema.get("columns");

    // Build lists for column names and value placeholders
    List<String> columnNamesList = new ArrayList<>();
    List<String> valuesList = new ArrayList<>();

    for (Map<String, Object> column : columns) {
        String columnName = (String) column.get("column_name");
        String dataType = (String) column.get("data_type");

        // Process Nested_JSON types
        if ("Nested_JSON".equals(dataType)) {
            List<Map<String, Object>> nestedColumns = (List<Map<String, Object>>) column.get("array_json");
            if (nestedColumns != null) {
                for (Map<String, Object> nestedColumn : nestedColumns) {
                    String nestedColumnName = (String) nestedColumn.get("column_name");

                    // Add nested column names and placeholders
                    columnNamesList.add(nestedColumnName);
                    valuesList.add("?");
                }
            }
        } else {
            // Add top-level column names and placeholders
            columnNamesList.add(columnName);
            valuesList.add("?");
        }
    }

    // Join column names and values for the query
    String columnNames = String.join(", ", columnNamesList);
    String values = String.join(", ", valuesList);

    // Generate the final insert query with created_time column
    return String.format("INSERT INTO %s (%s, created_time) VALUES (%s, CURRENT_TIMESTAMP::TIMESTAMP)", 
                         tableName, columnNames, values);
}
