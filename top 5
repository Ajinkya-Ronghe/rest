public static Map<String, Integer> sortAndTransformMap(Map<String, Integer> map, int topN) {
        // Sort the entries by values in descending order
        List<Map.Entry<String, Integer>> sortedEntries = map.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .collect(Collectors.toList());

        // Take the top N entries
        List<Map.Entry<String, Integer>> topEntries = sortedEntries.stream()
                .limit(topN)
                .collect(Collectors.toList());

        // Calculate the sum of the remaining entries
        int othersSum = sortedEntries.stream()
                .skip(topN)
                .mapToInt(Map.Entry::getValue)
                .sum();

        // Create a new map for the result
        Map<String, Integer> result = new LinkedHashMap<>();

        // Add the top N entries to the result map
        for (Map.Entry<String, Integer> entry : topEntries) {
            result.put(entry.getKey(), entry.getValue());
        }

        // Add the "Others" entry if there are remaining entries
        if (othersSum > 0) {
            result.put("Others", othersSum);
        }

        return result;
    }
