generatePDFFromJSON(jsonData: any[]): void {
  if (!jsonData || jsonData.length === 0) {
    console.error('No data provided for the PDF');
    return;
  }

  const headers = Object.keys(jsonData[0]); // Extract headers from JSON keys
  const rows = jsonData.map((row) => Object.values(row)); // Extract row data from JSON values

  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 10;
  const fontHeight = 10;
  let y = margin;

  // Add Title
  pdf.setFontSize(14);
  pdf.text('Exported Table', margin, y);
  y += fontHeight + 5;

  // Calculate Column Widths
  const columnWidth = (pageWidth - 2 * margin) / headers.length;

  // Render Headers
  headers.forEach((header, index) => {
    const x = margin + index * columnWidth;

    // Default header styles
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 0, 0); // Black text
    pdf.setFillColor(230, 230, 230); // Light gray background
    pdf.rect(x, y - fontHeight, columnWidth, fontHeight, 'F'); // Draw background
    pdf.text(header, x + 2, y - 2); // Add header text
  });
  y += fontHeight;

  // Render Rows
  rows.forEach((row) => {
    row.forEach((cell, index) => {
      const x = margin + index * columnWidth;

      // Default row styles
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(0, 0, 0); // Black text
      pdf.setFillColor(255, 255, 255); // White background
      pdf.rect(x, y - fontHeight, columnWidth, fontHeight, 'F'); // Draw background
      pdf.text(cell?.toString(), x + 2, y - 2); // Add cell text
    });
    y += fontHeight;

    // Add a new page if necessary
    if (y + fontHeight > pdf.internal.pageSize.getHeight() - margin) {
      pdf.addPage();
      y = margin;
    }
  });

  pdf.save('table.pdf');
}
