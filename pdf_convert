generatePDF(jsonData: any[]): void {
  if (!jsonData || jsonData.length === 0) {
    console.error('No data provided for the PDF');
    return;
  }

  // Extract breadcrumb title from the HTML
  const breadcrumbElement = document.querySelector('.breadcrumb span:nth-child(1)');
  const title = breadcrumbElement?.textContent?.trim() || 'Exported Table'; // Default title if not found

  // Extract all unique keys as headers
  const headers = Array.from(
    new Set(jsonData.flatMap((row) => Object.keys(row)))
  );

  // Ensure rows map to all headers
  const rows = jsonData.map((row) =>
    headers.map((header) => (row[header] !== undefined ? row[header] : ''))
  );

  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 10;
  const fontHeight = 8; // Adjusted for compact rows
  const columnWidth = (pageWidth - 2 * margin) / headers.length;
  let y = margin;

  // Add dynamic title to the PDF
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.text(title, pageWidth / 2, y, { align: 'center' });
  y += fontHeight + 6;

  // Function to render headers with consistent background color
  const renderHeaders = () => {
    let headerMaxHeight = 0;

    // Calculate the maximum height for header row
    headers.forEach((header) => {
      const wrappedHeaderText = pdf.splitTextToSize(header, columnWidth - 4);
      const headerHeight = wrappedHeaderText.length * fontHeight * 1.1;
      headerMaxHeight = Math.max(headerMaxHeight, headerHeight);
    });

    // Draw the background and render header text
    headers.forEach((header, index) => {
      const x = margin + index * columnWidth;

      // Draw full background for the header cell
      pdf.setFillColor(200, 200, 200); // Light gray background
      pdf.rect(x, y, columnWidth, headerMaxHeight, 'F'); // Full background

      // Add wrapped header text
      const wrappedHeaderText = pdf.splitTextToSize(header, columnWidth - 4);
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(0, 0, 0); // Black text
      pdf.text(wrappedHeaderText, x + 2, y + fontHeight, { baseline: 'top' }); // Align text properly
    });

    y += headerMaxHeight; // Adjust y position after header
  };

  // Render headers on the first page
  renderHeaders();

  // Render rows with adjusted spacing
  rows.forEach((row) => {
    let rowMaxHeight = 0;

    // Calculate the maximum height for the current row
    row.forEach((cell, index) => {
      const wrappedText = pdf.splitTextToSize(cell?.toString(), columnWidth - 4);
      const cellHeight = wrappedText.length * fontHeight * 1.1; // Adjust for wrapped text
      rowMaxHeight = Math.max(rowMaxHeight, cellHeight);
    });

    // Render each cell in the row
    row.forEach((cell, index) => {
      const x = margin + index * columnWidth;

      // Draw full background for the cell
      pdf.setFillColor(255, 255, 255); // White background
      pdf.rect(x, y, columnWidth, rowMaxHeight, 'F'); // Full background

      // Add wrapped cell text
      const wrappedText = pdf.splitTextToSize(cell?.toString(), columnWidth - 4);
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(0, 0, 0); // Black text
      pdf.text(wrappedText, x + 2, y + fontHeight, { baseline: 'top' }); // Align text properly
    });

    y += rowMaxHeight; // Move to the next row based on max height in the row

    // Check if a new page is needed
    if (y + fontHeight > pageHeight - margin) {
      pdf.addPage(); // Add a new page
      y = margin; // Reset y position
      renderHeaders(); // Render headers on the new page
    }
  });

  // Save the PDF with the title as the file name
  pdf.save(`${title}.pdf`);
}
