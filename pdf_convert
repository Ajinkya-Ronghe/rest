generatePDF(jsonData: any[]): void {
  if (!jsonData || jsonData.length === 0) {
    console.error('No data provided for the PDF');
    return;
  }

  // Find the <h1> element with matching title
  const titleElement = Array.from(document.querySelectorAll('h1')).find(
    (el) => el.textContent?.trim() === this.data.title
  );

  if (!titleElement) {
    console.error(`Title '${this.data.title}' not found in the document`);
    return;
  }

  // Locate the first table-wrapper or mat-table after the title
  let tableWrapper: HTMLElement | null = null;

  // Traverse the sibling and child nodes to find the closest table
  let currentElement: HTMLElement | null = titleElement.parentElement;
  while (currentElement) {
    tableWrapper = currentElement.querySelector('mat-table, .table-wrapper');
    if (tableWrapper) break;
    currentElement = currentElement.parentElement;
  }

  if (!tableWrapper) {
    console.error('No table-wrapper or mat-table found near the title');
    return;
  }

  // Extract headers and keys from the table
  const columns = Array.from(tableWrapper.querySelectorAll('mat-header-cell')).map((cell) => ({
    jsonKey: cell.getAttribute('matColumnDef') || '',
    header: cell.textContent?.trim() || '',
  }));

  if (columns.length === 0) {
    console.error('No columns found in the table');
    return;
  }

  // PDF Configuration
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 10;
  const fontHeight = 4;
  const columnWidth = (pageWidth - 2 * margin) / columns.length;
  let y = margin;

  // Add Title at the top
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.text(this.data.title, pageWidth / 2, y, { align: 'center' });
  y += fontHeight * 2;

  // Render Headers
  const renderHeaders = () => {
    let headerMaxHeight = 0;

    columns.forEach((col) => {
      const wrappedHeaderText = pdf.splitTextToSize(col.header, columnWidth - 4);
      const headerHeight = wrappedHeaderText.length * fontHeight * 1.3;
      headerMaxHeight = Math.max(headerMaxHeight, headerHeight);
    });

    columns.forEach((col, index) => {
      const x = margin + index * columnWidth;
      pdf.setFillColor(200, 200, 200); // Light gray background
      pdf.rect(x, y, columnWidth, headerMaxHeight, 'F');

      const wrappedHeaderText = pdf.splitTextToSize(col.header, columnWidth - 4);
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(0, 0, 0);
      pdf.text(wrappedHeaderText, x + 2, y + fontHeight, { baseline: 'top' });
    });

    y += headerMaxHeight;
  };

  renderHeaders();

  // Render Rows
  jsonData.forEach((row) => {
    let rowMaxHeight = 0;

    columns.forEach((col, index) => {
      const x = margin + index * columnWidth;
      const cellValue = row[col.jsonKey] !== undefined ? row[col.jsonKey].toString() : '';
      const wrappedText = pdf.splitTextToSize(cellValue, columnWidth - 4);
      const cellHeight = wrappedText.length * fontHeight * 1.3;

      rowMaxHeight = Math.max(rowMaxHeight, cellHeight);

      pdf.setFillColor(255, 255, 255);
      pdf.rect(x, y, columnWidth, cellHeight, 'F');
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(0, 0, 0);
      pdf.text(wrappedText, x + 2, y + fontHeight, { baseline: 'top' });
    });

    y += rowMaxHeight;

    // Add a new page if required
    if (y + fontHeight > pageHeight - margin) {
      pdf.addPage();
      y = margin;
      renderHeaders();
    }
  });

  // Save the PDF with the title as filename
  pdf.save(`${this.data.title}.pdf`);
}
