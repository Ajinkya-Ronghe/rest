Option 2: Extract Data and Build the Table Dynamically
Instead of relying on Angular Material's DOM structure, extract the table data programmatically from your dataSource and displayedColumns.

Generate a Custom Table for the PDF:
typescript
Copy code
generateHTMLTable(): string {
  if (!this.dataSource || this.dataSource.length === 0) {
    return '<p>No data available</p>';
  }

  const headers = this.displayedColumns;
  let table = '<table border="1" style="width: 100%; border-collapse: collapse; text-align: left;">';
  table += '<thead><tr>';
  headers.forEach(header => {
    table += `<th style="padding: 5px; background-color: #f2f2f2;">${header}</th>`;
  });
  table += '</tr></thead>';

  table += '<tbody>';
  this.dataSource.forEach((row: any) => {
    table += '<tr>';
    headers.forEach(column => {
      table += `<td style="padding: 5px;">${row[column] || ''}</td>`;
    });
    table += '</tr>';
  });
  table += '</tbody></table>';

  return table;
}
Updated convertToPDF Function:
typescript
Copy code
convertToPDF(): Promise<Blob> {
  const element = document.createElement('div');
  element.innerHTML = this.generateHTMLTable(); // Generate the table HTML dynamically

  const options = {
    margin: 10,
    html2canvas: { scale: 2 },
    jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
  };

  return new Promise((resolve, reject) => {
    html2pdf()
      .from(element)
      .set(options)
      .outputPdf('blob')
      .then((blob: Blob) => resolve(blob))
      .catch((error: any) => reject(error));
  });
}
