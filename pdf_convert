background color) for each cell.

typescript
Copy code
extractTableData(): { headers: { text: string; style: any }[]; rows: { text: string; style: any }[][] } {
  const table = document.querySelector('mat-table') as HTMLElement;

  if (!table) {
    console.error('No <mat-table> found on the page');
    return { headers: [], rows: [] };
  }

  const headers: { text: string; style: any }[] = [];
  const rows: { text: string; style: any }[][] = [];

  // Extract headers
  const headerCells = table.querySelectorAll('mat-header-cell');
  headerCells.forEach((cell: HTMLElement) => {
    headers.push({
      text: cell.textContent?.trim() || '',
      style: window.getComputedStyle(cell), // Extract computed styles
    });
  });

  // Extract rows
  const rowElements = table.querySelectorAll('mat-row');
  rowElements.forEach((row: HTMLElement) => {
    const cells: { text: string; style: any }[] = [];
    row.querySelectorAll('mat-cell').forEach((cell: HTMLElement) => {
      cells.push({
        text: cell.textContent?.trim() || '',
        style: window.getComputedStyle(cell), // Extract computed styles
      });
    });
    rows.push(cells);
  });

  return { headers, rows };
}
Step 2: Modify generatePDF
Apply the extracted styles (like font size, boldness, and background color) to the PDF while rendering the headers and rows.

typescript
Copy code
generatePDF(): void {
  const { headers, rows } = this.extractTableData();

  if (headers.length === 0 || rows.length === 0) {
    console.error('No data found in the table');
    return;
  }

  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 10;
  const fontHeight = 10;
  let y = margin;

  // Add Title
  pdf.setFontSize(14);
  pdf.text('Exported Table', margin, y);
  y += fontHeight + 5;

  // Calculate Column Widths
  const columnWidth = (pageWidth - 2 * margin) / headers.length;

  // Add Headers with Styling
  headers.forEach((header, index) => {
    const x = margin + index * columnWidth;

    // Apply header styles
    pdf.setFontSize(parseInt(header.style.fontSize) || 10);
    pdf.setFont(header.style.fontWeight === 'bold' ? 'helvetica' : 'normal', 'bold');
    pdf.setFillColor(header.style.backgroundColor || '#f2f2f2');
    pdf.rect(x, y - fontHeight, columnWidth, fontHeight, 'F'); // Draw filled background
    pdf.text(header.text, x + 2, y - 2); // Add text with padding
  });
  y += fontHeight;

  // Add Rows with Styling
  rows.forEach((row) => {
    row.forEach((cell, index) => {
      const x = margin + index * columnWidth;

      // Apply cell styles
      pdf.setFontSize(parseInt(cell.style.fontSize) || 10);
      pdf.setFont('helvetica', 'normal');
      pdf.setFillColor(cell.style.backgroundColor || '#ffffff');
      pdf.rect(x, y - fontHeight, columnWidth, fontHeight, 'F'); // Draw filled background
      pdf.text(cell.text, x + 2, y - 2); // Add text with padding
    });
    y += fontHeight;

    // Add a new page if necessary
    if (y + fontHeight > pdf.internal.pageSize.getHeight() - margin) {
      pdf.addPage();
      y = margin;
    }
  });

  // Save PDF
  pdf.save('table.pdf');
}
