
Yes, you can extract all computed styles of a table directly using getComputedStyle for every element (e.g., headers, rows, and cells). This approach ensures that all final styles applied by the browser (from inline styles, classes, or external CSS) are used in the PDF generation.

Hereâ€™s how you can modify the code to fetch all computed styles:

Updated Implementation: Extract All Browser-Computed Styles
Step 1: Extract Table Data with Computed Styles
Modify the extractTableData function to fetch all computed styles for each table cell.

typescript
Copy code
extractTableData(): { headers: { text: string; styles: CSSStyleDeclaration }[]; rows: { text: string; styles: CSSStyleDeclaration }[][] } {
  const table = document.querySelector('mat-table') as HTMLElement;

  if (!table) {
    console.error('No <mat-table> found on the page');
    return { headers: [], rows: [] };
  }

  const headers: { text: string; styles: CSSStyleDeclaration }[] = [];
  const rows: { text: string; styles: CSSStyleDeclaration }[][] = [];

  // Extract headers
  const headerCells = table.querySelectorAll('mat-header-cell');
  headerCells.forEach((cell) => {
    const headerCell = cell as HTMLElement; // Cast to HTMLElement
    headers.push({
      text: headerCell.textContent?.trim() || '',
      styles: window.getComputedStyle(headerCell), // Get all computed styles
    });
  });

  // Extract rows
  const rowElements = table.querySelectorAll('mat-row');
  rowElements.forEach((row) => {
    const cells: { text: string; styles: CSSStyleDeclaration }[] = [];
    row.querySelectorAll('mat-cell').forEach((cell) => {
      const tableCell = cell as HTMLElement; // Cast to HTMLElement
      cells.push({
        text: tableCell.textContent?.trim() || '',
        styles: window.getComputedStyle(tableCell), // Get all computed styles
      });
    });
    rows.push(cells);
  });

  return { headers, rows };
}
Step 2: Generate PDF Using Computed Styles
The generatePDF function applies the extracted computed styles to the PDF. Here's the updated function:

typescript
Copy code
import { jsPDF } from 'jspdf';

generatePDF(): void {
  const { headers, rows } = this.extractTableData();

  if (headers.length === 0 || rows.length === 0) {
    console.error('No data found in the table');
    return;
  }

  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 10;
  let y = margin;
  const fontHeight = 10;

  // Add Title
  pdf.setFontSize(14);
  pdf.text('Exported Table', margin, y);
  y += fontHeight + 5;

  // Calculate Column Widths
  const columnWidth = (pageWidth - 2 * margin) / headers.length;

  // Render Headers
  headers.forEach((header, index) => {
    const x = margin + index * columnWidth;

    // Apply computed styles for headers
    pdf.setFontSize(parseInt(header.styles.fontSize) || 10);
    pdf.setFont(header.styles.fontWeight === 'bold' ? 'helvetica' : 'normal', 'bold');
    pdf.setTextColor(header.styles.color || '#000000');
    pdf.setFillColor(header.styles.backgroundColor || '#f2f2f2');
    pdf.rect(x, y - fontHeight, columnWidth, fontHeight, 'F'); // Draw background
    pdf.text(header.text, x + 2, y - 2); // Add text
  });
  y += fontHeight;

  // Render Rows
  rows.forEach((row) => {
    row.forEach((cell, index) => {
      const x = margin + index * columnWidth;

      // Apply computed styles for rows
      pdf.setFontSize(parseInt(cell.styles.fontSize) || 10);
      pdf.setFont(cell.styles.fontWeight === 'bold' ? 'helvetica' : 'normal', 'normal');
      pdf.setTextColor(cell.styles.color || '#000000');
      pdf.setFillColor(cell.styles.backgroundColor || '#ffffff');
      pdf.rect(x, y - fontHeight, columnWidth, fontHeight, 'F'); // Draw background
      pdf.text(cell.text, x + 2, y - 2); // Add text
    });
    y += fontHeight;

    // Add a new page if necessary
    if (y + fontHeight > pdf.internal.pageSize.getHeight() - margin) {
      pdf.addPage();
      y = margin;
    }
  });

  // Save PDF
  pdf.save('table.pdf');
}
